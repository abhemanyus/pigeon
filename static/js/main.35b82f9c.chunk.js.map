{"version":3,"sources":["components/SignOut.js","components/ChatMessage.js","components/MessageBox.js","components/ChatRoom.js","components/SignIn.js","App.js","reportWebVitals.js","index.js"],"names":["SignOut","props","auth","currentUser","onClick","signOut","ChatMessage","message","uid","text","createdAt","messageClass","user","className","moment","toDate","fromNow","MessageBox","useState","settext","onSubmit","e","sendMessage","scroller","autoComplete","htmlFor","type","name","id","value","onChange","target","ChatRoom","messageRef","firestore","collection","query","orderBy","limit","useCollectionData","idField","messages","a","preventDefault","add","Date","scrollRef","useRef","map","current","scrollIntoView","behavior","ref","SignIn","provider","signInWithPopup","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","setPersistence","Auth","Persistence","LOCAL","enablePersistence","App","useAuthState","GoogleAuthProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35b82f9c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction SignOut(props) {\n  const {auth} =props;\n  return auth.currentUser && (\n    <div>\n      <button onClick={() => auth.signOut()}>Sign Out</button>\n    </div>\n  )\n}\n\nexport default SignOut;\n","import React from 'react';\nimport moment from 'moment';\nimport Markdown from 'markdown-to-jsx';\n\nfunction ChatMessage(props) {\n  const { uid, text, createdAt} = props.message;\n  const messageClass = uid === props.user ? 'sent' : 'recieved';\n  return (\n    <div className={`message ${messageClass}`}>\n      <Markdown>{text || \"Loading...\"}</Markdown>\n      <footer>{moment(createdAt.toDate()).fromNow()}</footer>\n    </div>\n  )\n}\n\nexport default ChatMessage\n","import React, { useState } from 'react'\n\nfunction MessageBox(props) {\n  const [text, settext] = useState('');\n  return (\n    <div className=\"Box\">\n      <form onSubmit={ (e) => {\n        props.sendMessage(e, text);\n        settext('');\n        props.scroller();\n      } } \n      autoComplete=\"off\">\n        <label htmlFor=\"message\">Write message</label>\n        <input type=\"text\" name=\"message\" id=\"message\" \n          value={text}\n          onChange={ e => settext(e.target.value)}\n        />\n        <button type=\"submit\"><i className=\"material-icons\">add</i></button>\n      </form>\n    </div>\n  )\n}\n\nexport default MessageBox\n","import React, { useRef } from 'react';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport './ChatRoom.css';\nimport SignOut from './SignOut';\nimport ChatMessage from './ChatMessage';\nimport MessageBox from './MessageBox';\n\nexport function ChatRoom(props) {\n  const messageRef = props.firestore.collection('messages');\n  const query = messageRef.orderBy('createdAt').limit(25);\n  const [messages] = useCollectionData(query, { idField: 'id' });\n  const sendMessage = async (e, message) => {\n    e.preventDefault();\n    await messageRef.add({\n      createdAt: new Date(),\n      text: message,\n      uid: props.auth.currentUser.uid\n    });\n  };\n  const scrollRef = useRef();\n  const scroller = () => scrollRef.current.scrollIntoView({ behavior: 'smooth' });\n  return (\n    <div className=\"Room\">\n      <nav>\n        <h1>Chat Room</h1>\n        <SignOut auth={props.auth} />\n      </nav>\n      <section>\n        {messages\n          && messages.map(message =>\n            <ChatMessage\n              key={message.id}\n              message={message}\n              user={props.auth.currentUser.uid}\n            />\n          )\n        }\n      </section>\n\n      <MessageBox sendMessage={sendMessage} scroller={scroller} />\n      <div ref={scrollRef}></div>\n    </div>\n  );\n}\n\nexport default ChatRoom;\n","import React from 'react';\n\nfunction SignIn(props) {\n  const signInWithGoogle = () => {\n    const provider = new props.provider();\n    props.auth.signInWithPopup(provider);\n  };\n  return (\n    <div>\n      <button onClick={signInWithGoogle}>Sign in with Google</button>\n    </div>\n  );\n}\n\nexport default SignIn;\n","import React from 'react';\nimport 'materialize-css/dist/css/materialize.css';\nimport 'materialize-css/dist/js/materialize.js';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport ChatRoom from './components/ChatRoom';\nimport SignIn from './components/SignIn';\n\nfirebase.initializeApp(\n  {\n    apiKey: \"AIzaSyAqNIXThnlV_JE4GmuZItVHoeHSQt1R8Bk\",\n    authDomain: \"pigeon-850cb.firebaseapp.com\",\n    projectId: \"pigeon-850cb\",\n    storageBucket: \"pigeon-850cb.appspot.com\",\n    messagingSenderId: \"94819366470\",\n    appId: \"1:94819366470:web:4715a99ba23047446a3c47\",\n    measurementId: \"G-SLGV1J17V3\"\n  }\n);\n\nconst auth = firebase.auth();\nauth.setPersistence(firebase.auth.Auth.Persistence.LOCAL);\nconst firestore = firebase.firestore();\nfirestore.enablePersistence();\n\nexport function App() {\n  const [user] = useAuthState(auth);\n  return (\n      <div className=\"App\">\n        {/* <header className=\"App-header\">\n        </header> */}\n        {user\n          ? <ChatRoom auth={auth} firestore={firestore} firebase={firebase}/>\n          : <SignIn provider={firebase.auth.GoogleAuthProvider} auth={auth}/>}\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}