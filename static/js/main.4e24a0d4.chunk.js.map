{"version":3,"sources":["components/SignOut.js","components/ChatMessage.js","components/MessageBox.js","components/ChatRoom.js","components/SignIn.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["SignOut","props","auth","currentUser","onClick","signOut","ChatMessage","message","uid","text","createdAt","messageClass","user","className","moment","toDate","fromNow","MessageBox","useState","settext","onSubmit","e","sendMessage","scroller","autoComplete","htmlFor","type","name","id","value","onChange","target","ChatRoom","messageRef","firestore","collection","query","orderBy","limit","useCollectionData","idField","messages","a","preventDefault","add","Date","scrollRef","useRef","map","current","scrollIntoView","behavior","ref","SignIn","provider","signInWithPopup","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","setPersistence","Auth","Persistence","LOCAL","enablePersistence","App","useAuthState","GoogleAuthProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4e24a0d4.chunk.js","sourcesContent":["import React from 'react';\n\nfunction SignOut(props) {\n  const {auth} =props;\n  return auth.currentUser && (\n    <div>\n      <button onClick={() => auth.signOut()}>Sign Out</button>\n    </div>\n  )\n}\n\nexport default SignOut;\n","import React from 'react';\nimport moment from 'moment';\nimport Markdown from 'markdown-to-jsx';\n\nfunction ChatMessage(props) {\n  const { uid, text, createdAt} = props.message;\n  const messageClass = uid === props.user ? 'sent' : 'recieved';\n  return (\n    <div className={`message ${messageClass}`}>\n      <Markdown>{text || \"Loading...\"}</Markdown>\n      <footer>{moment(createdAt.toDate()).fromNow()}</footer>\n    </div>\n  )\n}\n\nexport default ChatMessage\n","import React, { useState } from 'react'\n\nfunction MessageBox(props) {\n  const [text, settext] = useState('');\n  return (\n    <div>\n      <form onSubmit={ (e) => {\n        props.sendMessage(e, text);\n        settext('');\n        props.scroller();\n      } } \n      autoComplete=\"off\">\n        <label htmlFor=\"message\">Write message</label>\n        <input type=\"text\" name=\"message\" id=\"message\" \n          value={text}\n          onChange={ e => settext(e.target.value)}\n        />\n        <button type=\"submit\"><i className=\"material-icons\">add</i></button>\n      </form>\n    </div>\n  )\n}\n\nexport default MessageBox\n","import React, { useRef } from 'react';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport './ChatRoom.css';\nimport SignOut from './SignOut';\nimport ChatMessage from './ChatMessage';\nimport MessageBox from './MessageBox';\n\nexport function ChatRoom(props) {\n  const messageRef = props.firestore.collection('messages');\n  const query = messageRef.orderBy('createdAt').limit(25);\n  const [messages] = useCollectionData(query, {idField: 'id'});\n  const sendMessage = async(e, message) => {\n    e.preventDefault();\n    await messageRef.add({\n      createdAt: new Date(),\n      text: message,\n      uid: props.auth.currentUser.uid\n    });\n  };\n  const scrollRef = useRef();\n  const scroller = () => scrollRef.current.scrollIntoView({ behavior: 'smooth' });\n    return (\n      <div>\n        <h1>Chat Room</h1>\n        {messages \n          && messages.map( message => \n              <ChatMessage \n                key={message.id} \n                message={message} \n                user={props.auth.currentUser.uid}\n              />\n          )\n        }\n        <MessageBox sendMessage={sendMessage} scroller={scroller}/>\n        <SignOut auth={props.auth}/>\n        <div ref={scrollRef}></div>\n      </div>\n    );\n}\n\nexport default ChatRoom;\n","import React from 'react';\n\nfunction SignIn(props) {\n  const signInWithGoogle = () => {\n    const provider = new props.provider();\n    props.auth.signInWithPopup(provider);\n  };\n  return (\n    <div>\n      <button onClick={signInWithGoogle}>Sign in with Google</button>\n    </div>\n  );\n}\n\nexport default SignIn;\n","import React from 'react';\nimport 'materialize-css/dist/css/materialize.css';\nimport 'materialize-css/dist/js/materialize.js';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport ChatRoom from './components/ChatRoom';\nimport SignIn from './components/SignIn';\n\nfirebase.initializeApp(\n  {\n    apiKey: \"AIzaSyAqNIXThnlV_JE4GmuZItVHoeHSQt1R8Bk\",\n    authDomain: \"pigeon-850cb.firebaseapp.com\",\n    projectId: \"pigeon-850cb\",\n    storageBucket: \"pigeon-850cb.appspot.com\",\n    messagingSenderId: \"94819366470\",\n    appId: \"1:94819366470:web:4715a99ba23047446a3c47\",\n    measurementId: \"G-SLGV1J17V3\"\n  }\n);\n\nconst auth = firebase.auth();\nauth.setPersistence(firebase.auth.Auth.Persistence.LOCAL);\nconst firestore = firebase.firestore();\nfirestore.enablePersistence();\n\nexport function App() {\n  const [user] = useAuthState(auth);\n  return (\n      <div className=\"App\">\n        {/* <header className=\"App-header\">\n        </header> */}\n        {user\n          ? <ChatRoom auth={auth} firestore={firestore} firebase={firebase}/>\n          : <SignIn provider={firebase.auth.GoogleAuthProvider} auth={auth}/>}\n      </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register () {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker();\n"],"sourceRoot":""}